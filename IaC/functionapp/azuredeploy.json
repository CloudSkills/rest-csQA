{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "maxLength": 6,
      "metadata": {
        "description": "The name for the function app. It must only contain characters and numbers, and be 6 chars long max."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS"
      ]
    },
    "appInsightsLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location to deploy Application Insights"
      }
    },
    "cosmosDatabaseName": {
      "type": "string",
      "metadata": {
        "description": "Cosmos DB database name"
      }
    },
    "cosmosDatabaseCollection": {
      "type": "string",
      "metadata": {
        "description": "Cosmos DB collection name"
      }
    },
    "cosmosCollectionPartitionKey": {
      "type": "string",
      "metadata": {
        "description": "The partition key for the Cosmos DB collection"
      }
    },
    "cosmosDatabaseSharedThroughput": {
      "type": "int",
      "defaultValue": 400,
      "minValue": 400,
      "maxValue": 1000000,
      "metadata": {
        "description": "The throughput for the database to be shared"
      }
    },
    "defaultConsistencyLevel": {
      "type": "string",
      "defaultValue": "Session",
      "allowedValues": [
        "Eventual",
        "ConsistentPrefix",
        "Session",
        "BoundedStaleness",
        "Strong"
      ],
      "metadata": {
        "description": "The default consistency level of the Cosmos DB account."
      }
    },
    "maxStalenessPrefix": {
      "type": "int",
      "minValue": 10,
      "defaultValue": 100000,
      "maxValue": 2147483647,
      "metadata": {
        "description": "Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000."
      }
    },
    "maxIntervalInSeconds": {
      "type": "int",
      "minValue": 5,
      "defaultValue": 300,
      "maxValue": 86400,
      "metadata": {
        "description": "Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
      }
    },
    "multipleWriteLocations": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [true, false],
      "metadata": {
        "description": "Enable multi-master to make all regions writable."
      }
    },
    "automaticFailover": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [true, false],
      "metadata": {
        "description": "Enable automatic failover for regions. Ignored when Multi-Master is enabled"
      }
    }
  },
  "variables": {
    "questionsStorageAccountName": "[toLower(concat(parameters('appName'),'storage'))]",
    "hostingPlanName": "[parameters('appName')]",
    "questionsFunctionAppName": "[concat(parameters('appName'),'-questions')]",
    "questionsStorageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('questionsStorageAccountName'))]",
    "questionsAppInsightsName": "[concat(parameters('appName'),'-ai')]",
    "cosmosDatabaseAccount": "[toLower(concat(parameters('appName'),'cosmos'))]",
    "consistencyPolicy": {
      "Eventual": {
        "defaultConsistencyLevel": "Eventual"
      },
      "ConsistentPrefix": {
        "defaultConsistencyLevel": "ConsistentPrefix"
      },
      "Session": {
        "defaultConsistencyLevel": "Session"
      },
      "BoundedStaleness": {
        "defaultConsistencyLevel": "BoundedStaleness",
        "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
        "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
      },
      "Strong": {
        "defaultConsistencyLevel": "Strong"
      }
    },
    "locations": [
      {
        "locationName": "[resourceGroup().location]",
        "failoverPriority": 0,
        "isZoneRedundant": false
      }
    ]
  },
  "resources": [
    {
      "name": "[variables('questionsStorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-10-01",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "dependsOn": [],
      "tags": {
        "displayName": "Questions Function App "
      },
      "kind": "Storage",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "microsoft.insights/components",
      "kind": "other",
      "name": "[variables('questionsAppInsightsName')]",
      "apiVersion": "2014-04-01",
      "location": "[parameters('appInsightsLocation')]",
      "tags": {},
      "scale": null,
      "properties": {
        "ApplicationId": "[variables('questionsFunctionAppName')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2016-09-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "computeMode": "Dynamic"
      },
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('cosmosDatabaseAccount')]",
      "apiVersion": "2019-08-01",
      "kind": "GlobalDocumentDB",
      "location": "[resourceGroup().location]",
      "properties": {
        "consistencyPolicy": "[variables('consistencyPolicy')[parameters('defaultConsistencyLevel')]]",
        "locations": "[variables('locations')]",
        "databaseAccountOfferType": "Standard",
        "enableAutomaticFailover": "[parameters('automaticFailover')]",
        "enableMultipleWriteLocations": "[parameters('multipleWriteLocations')]"
      },
      "tags": {
        "displayName": "cosmosDB"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "name": "[concat(variables('cosmosDatabaseAccount'), '/', parameters('cosmosDatabaseName'))]",
      "apiVersion": "2019-08-01",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDatabaseAccount'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('cosmosDatabaseName')]"
        },
        "options": {
          "throughput": "[parameters('cosmosDatabaseSharedThroughput')]"
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "name": "[concat(variables('cosmosDatabaseAccount'), '/', parameters('cosmosDatabaseName'), '/', parameters('cosmosDatabaseCollection'))]",
      "apiVersion": "2019-08-01",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDatabaseAccount'), parameters('cosmosDatabaseName'))]"
      ],
      "properties": {
        "options": {},
        "resource": {
          "id": "[parameters('cosmosDatabaseCollection')]",
          "partitionKey": {
            "paths": ["[parameters('cosmosCollectionPartitionKey')]"],
            "kind": "Hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": []
          }
        }
      }
    },
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('questionsFunctionAppName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Questions Function App"
      },
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('questionsStorageAccountName'))]",
        "[concat('Microsoft.DocumentDb/databaseAccounts/', variables('cosmosDatabaseAccount'))]",
        "[resourceId('microsoft.insights/components', variables('questionsAppInsightsName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('questionsStorageAccountName'), ';AccountKey=', listKeys(variables('questionsStorageAccountId'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('questionsStorageAccountName'), ';AccountKey=', listKeys(variables('questionsStorageAccountId'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('questionsFunctionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('questionsAppInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "COSMOSDB_CONNECTION_STRING",
              "value": "[concat('AccountEndpoint=',reference(concat('Microsoft.DocumentDb/databaseAccounts/',variables('cosmosDatabaseAccount'))).documentEndpoint,';AccountKey=',listKeys(resourceId('Microsoft.DocumentDb/databaseAccounts', variables('cosmosDatabaseAccount')), '2015-04-08').primaryMasterKey,';')]"
            },
            {
              "name": "COSMOS_DB_DATABASE_URL",
              "value": "[reference(concat('Microsoft.DocumentDb/databaseAccounts/',variables('cosmosDatabaseAccount'))).documentEndpoint]"
            },
            {
              "name": "COSMOS_DB_DATABASE_KEY",
              "value": "[listKeys(resourceId('Microsoft.DocumentDb/databaseAccounts', variables('cosmosDatabaseAccount')), '2015-04-08').primaryMasterKey]"
            },
            {
              "name": "Settings:CosmosDbDatabaseName",
              "value": "[parameters('cosmosDatabaseName')]"
            },
            {
              "name": "Settings:CosmosDbContainerName",
              "value": "[parameters('cosmosDatabaseCollection')]"
            },
            {
              "name": "COSMOSDB_DATABASE_NAME",
              "value": "[parameters('cosmosDatabaseName')]"
            },
            {
              "name": "COSMOSDB_DATABASE_COL",
              "value": "[parameters('cosmosDatabaseCollection')]"
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "cosmosDatabaseAccount": {
      "type": "string",
      "value": "[variables('cosmosDatabaseAccount')]"
    },
    "questionsFunctionAppName": {
      "type": "string",
      "value": "[variables('questionsFunctionAppName')]"
    }
  }
}
